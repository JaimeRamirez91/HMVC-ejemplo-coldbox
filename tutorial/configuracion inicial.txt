1) crear docker-compose.yaml 

        version: "3"

        services:

        # MySQL Database
        db:
            image: mysql:5.7
            container_name: "cb_database"
            environment:
            MYSQL_ROOT_PASSWORD: coldbox
            MYSQL_DATABASE: cms
            MYSQL_USER: cms
            MYSQL_PASSWORD: coldbox
            ports:
            - "3307:3306"
            volumes:
            - ./build/db:/var/lib/mysql
            - ./workbench/db/cms.sql:/docker-entrypoint-initdb.d/cms.sql
        
        # API
        #api:
        #  depends_on:
        #    - db
        #  image: ortussolutions/commandbox
        #  container_name: "api"
        #  # Environment Variables
        #  environment:
        #    cfconfig_adminPassword: coldbox
        #  # Ports
        #  ports:
        #    - "8080:8080"
        #  # Data & Overrides
        #  volumes:
        #    - ./:/app
        #  links:
        #    - db:database


2) crear el directorio workbench
3) ejecutar: docker-compose up     //para ejecutar la base de datos en docker
4) instalar dependencias en commandbox: install commandbox-dotenv,commandbox-cfconfig
5) crear un proyecto rest: coldbox create app name=cms skeleton=rest-hmvc
6) Actualizar la configuracion .env
    # ColdBox Environment
    APPNAME=ColdBox
    ENVIRONMENT=development

    # Database Information
    DB_CONNECTIONSTRING=jdbc:mysql://127.0.0.1:3307/cms?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&useLegacyDatetimeCode=true
    DB_CLASS=com.mysql.jdbc.Driver
    DB_DRIVER=MySQL
    DB_HOST=127.0.0.1
    DB_PORT=3307
    DB_DATABASE=cms
    DB_USER=cms
    DB_PASSWORD=coldbox

    # JWT Information
    JWT_SECRET=

    # S3 Information
    S3_ACCESS_KEY=
    S3_SECRET_KEY=
    S3_REGION=us-east-1
    S3_DOMAIN=amazonaws.com

7) change cconfig.json
    {
        "requestTimeoutEnabled":true,
        "whitespaceManagement":"white-space-pref",
        "requestTimeout":"0,0,5,0",
        "cacheDefaultObject":"coldbox",
        "caches":{
            "coldbox":{
                "storage":"true",
                "type":"RAM",
                "custom":{
                    "timeToIdleSeconds":"1800",
                    "timeToLiveSeconds":"3600"
                },
                "class":"lucee.runtime.cache.ram.RamCache",
                "readOnly":"false"
            }
        },
        "datasources" : {
            "${DB_DATABASE}":{
                "host":"${DB_HOST}",
                "dbdriver":"${DB_DRIVER}",
                "database":"${DB_DATABASE}",
                "dsn":"jdbc:mysql://{host}:{port}/{database}",
                "custom":"useUnicode=true&characterEncoding=UTF-8&useLegacyDatetimeCode=true&autoReconnect=true",
                "port":"${DB_PORT}",
                "class":"${DB_CLASS}",
                "username":"${DB_USER}",
                "password":"${DB_PASSWORD}",
                "connectionLimit":"100",
                "connectionTimeout":"1"
            }
        }
    }
8) activa log,  para ver los procesos del server:    server log --follow
9) ejecutar test automaticos: http://127.0.0.1:42518/tests/runner.cfm
10) ejecuta un observador y ejecuta automaticamente los test: testbox watch
11) Instalaremos varios módulos para ayudarnos con el desarrollo de nuestra API

        qb- Generador de consultas fluido para consultas sofisticadas ( https://forgebox.io/view/qb )

        cbvalidation- Para proporcionar validaciones del lado del servidor ( https://forgebox.io/view/cbValidation )

        bcrypt- Para habilitar el cifrado de contraseñas ( https://www.forgebox.io/view/BCrypt )

        cbsecurity- Para asegurar nuestra API y proporcionarnos tokens JWT ( https://www.forgebox.io/view/cbsecurity )

        mementifier- Para convertir nuestros objetos en estructuras de datos nativas para la exportación JSON (arrays / structs) ( https://www.forgebox.io/view/mementifier )

        route-visualizer: Visualice sus rutas ( https://www.forgebox.io/view/route-visualizer )

        install route-visualizer --saveDev
        install cbvalidation,qb,bcrypt,mementifier,cbsecurity
        coldbox reinit
12)    agregar aplication.cfc y test/aplication.cfc
       // App datasource
       this.datasource = "cms"; 
13) Creemos una clase de especificación base de la que heredarán todas nuestras pruebas de integración. Colóquelo debajotests/resources/BaseIntegrationSpec.cfc
    
    
    component extends="coldbox.system.testing.BaseTestCase" appMapping="/root"{

            // Load on first test
            this.loadColdBox    = true;
            // Never unload until the request dies
            this.unloadColdBox  = false;

            /**
            * Run Before all tests
            */
            function beforeAll() {
                super.beforeAll();
                // Wire up the test object with dependencies
                application.wirebox.autowire( this );
            }

            /**
            * This function is tagged as an around each handler.  All the integration tests we build
            * will be automatically rolled backed. No database corruption
            * 
            * @aroundEach
            */
            function wrapInTransaction( spec ) {
                transaction action="begin" {
                    try {
                        arguments.spec.body();
                    } catch ( any e ){
                        rethrow;
                    } finally {
                        transaction action="rollback";
                    }
                }
            }

        }

14)Actualice el tests/specs/integration/EchoTests.cfcpara heredar de esta especificación y verifique que funcione. Debe tener un aspecto como este:
       component extends="tests.resources.BaseIntegrationSpec"{}
       